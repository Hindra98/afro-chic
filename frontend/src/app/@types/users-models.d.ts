
interface WhoIAmResult {
  userId: string;
  fullName: string;
  userName: string;
  contactMedia: string;
}
interface UserRowData {
  key: string;
  userName: string;
  email: string;
  fullName: string;
  isDefaultUser: boolean;
  isLockedout: boolean;
  isUserConsentEmailNotification: boolean;
  isUserConsentSmsNotification: boolean;
}
interface GetUsers {
  isAdministrator: boolean;
  users: UserRowData[];
  branches: Branche[];
  roles: Role[];
}
interface GetUser {
  isAdministrator: boolean;
  user: User;
  idDocumentTypes: IdDocumentTypes[]
  branches: Branche[];
  roles: Role[];
}

interface User {
  key: string;
  userName: string;
  email: string;
  firstName: string;
  middleName: string;
  lastName: string;
  verified: string;
  isVerified: boolean;
  isUserConsentEmailNotification: boolean;
  isUserConsentSmsNotification: boolean;
  tenantId: string;
  verificationPIN: string;
  verificationPINExpires: string;
  acceptTerms: boolean;
  passwordReset: string;
  resetTokenExpires: string;
  created: string;
  updated: string;
  isDefaultUser: boolean;
  status: boolean;
  identityDocumentType: number;
  idCardNumber: string;
  phoneNumber: string;
  preferedCommunicationChannel: string;

  roles: {
    id: string;
    name: string;
  }[];
}
interface UserCommand {
  key: string;
}

interface Branche {
  value: string;
  label: string;
  meta: string;
}

interface Role {
  value: string;
  label: string;
  meta: string;
}

interface UpdateUserCommand {
  key: string;
  user: {
    key: string;
    userName: string;
    password: {
      password: string;
      passwordConfirmation: string;
    }
    email: {
      email: string;
      emailConfirmation: string;
    };
    isTwoFactorEnabled: boolean;
    phoneNumber: string;
    isUserConsentEmailNotification: boolean;
    isUserConsentSmsNotification: boolean;
    preferedCommunicationChannel: string;
    firstName: string;
    middleName: string;
    lastName: string;
    idCardNumber: string;
    identityDocumentType: number;
    branchId: string;
    roles: {
      id: string;
      name: string;
    }[];
  };
  isPasswordAutoGenerated: boolean;
}
interface UpdateUserResult {
  payload: UpdateUserSuccessPayload;
  hasSucceeded: boolean;
  errorMessages: ErrorMessageItem[];
}
interface UpdateUserSuccessPayload {
  message: string;
}

interface DeleteUserCommand {
  key: string;
}
interface DeleteUser {
  hasSucceeded: boolean;
  errorMessages: ErrorMessageItem[];
}

interface AddUserCommand {
  key: string;
  user: {
    key: string;
    userName: string;
    password: {
      password: string;
      passwordConfirmation: string;
    }
    email: {
      email: string;
      emailConfirmation: string;
    };
    isTwoFactorEnabled: boolean;
    phoneNumber: string;
    isUserConsentEmailNotification: boolean;
    isUserConsentSmsNotification: boolean;
    preferedCommunicationChannel: string;
    firstName: string;
    middleName: string;
    lastName: string;
    idCardNumber: string;
    identityDocumentType: number;
    branchId: string;
    roles: {
      id: string;
      name: string;
    }[];
  };
  isPasswordAutoGenerated: boolean;
}
interface AddUserResult {
  payload: AddUserSuccessPayload;
  hasSucceeded: boolean;
  errorMessages: ErrorMessageItem[];
}
interface AddUserSuccessPayload {
  message: string;
}

interface LockUserCommand {
  enabled: boolean;
  userId: string;
}
interface LockUserResult {
  hasSucceeded: boolean;
  errorMessages: ErrorMessageItem[];
}

interface ResetPasswordUserCommand {
  password: string,
  passwordConfirmation: string,
  userId: string,
  isPasswordAutoGenerated: boolean,
  destinationEmailAddress: string
}
interface ResetPasswordUserResult {
  hasSucceeded: boolean;
  errorMessages: ErrorMessageItem[];
  payload: ResetPasswordUserSuccessPayload;
}
interface ResetPasswordUserSuccessPayload {
  message: string;
}

